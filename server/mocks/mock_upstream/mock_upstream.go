// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/upstream (interfaces: Upstream)

// Package mock_upstream is a generated GoMock package.
package mock_upstream

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apps "github.com/mattermost/mattermost-plugin-apps/apps"
)

// MockUpstream is a mock of Upstream interface.
type MockUpstream struct {
	ctrl     *gomock.Controller
	recorder *MockUpstreamMockRecorder
}

// MockUpstreamMockRecorder is the mock recorder for MockUpstream.
type MockUpstreamMockRecorder struct {
	mock *MockUpstream
}

// NewMockUpstream creates a new mock instance.
func NewMockUpstream(ctrl *gomock.Controller) *MockUpstream {
	mock := &MockUpstream{ctrl: ctrl}
	mock.recorder = &MockUpstreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpstream) EXPECT() *MockUpstreamMockRecorder {
	return m.recorder
}

// GetStatic mocks base method.
func (m *MockUpstream) GetStatic(arg0 string) (io.ReadCloser, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatic", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatic indicates an expected call of GetStatic.
func (mr *MockUpstreamMockRecorder) GetStatic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatic", reflect.TypeOf((*MockUpstream)(nil).GetStatic), arg0)
}

// Roundtrip mocks base method.
func (m *MockUpstream) Roundtrip(arg0 *apps.CallRequest, arg1 bool) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roundtrip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roundtrip indicates an expected call of Roundtrip.
func (mr *MockUpstreamMockRecorder) Roundtrip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roundtrip", reflect.TypeOf((*MockUpstream)(nil).Roundtrip), arg0, arg1)
}
