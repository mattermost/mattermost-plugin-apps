// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/config (interfaces: Service)

// Package mock_config is a generated GoMock package.
package mock_config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pluginapi "github.com/mattermost/mattermost-plugin-api"
	config "github.com/mattermost/mattermost-plugin-apps/server/config"
	telemetry "github.com/mattermost/mattermost-plugin-apps/server/telemetry"
	utils "github.com/mattermost/mattermost-plugin-apps/utils"
	configservice "github.com/mattermost/mattermost-server/v6/services/configservice"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Basic mocks base method.
func (m *MockService) Basic() (config.Config, *pluginapi.Client, utils.Logger) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Basic")
	ret0, _ := ret[0].(config.Config)
	ret1, _ := ret[1].(*pluginapi.Client)
	ret2, _ := ret[2].(utils.Logger)
	return ret0, ret1, ret2
}

// Basic indicates an expected call of Basic.
func (mr *MockServiceMockRecorder) Basic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Basic", reflect.TypeOf((*MockService)(nil).Basic))
}

// Get mocks base method.
func (m *MockService) Get() config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(config.Config)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get))
}

// Logger mocks base method.
func (m *MockService) Logger() utils.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(utils.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockServiceMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockService)(nil).Logger))
}

// MattermostAPI mocks base method.
func (m *MockService) MattermostAPI() *pluginapi.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MattermostAPI")
	ret0, _ := ret[0].(*pluginapi.Client)
	return ret0
}

// MattermostAPI indicates an expected call of MattermostAPI.
func (mr *MockServiceMockRecorder) MattermostAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MattermostAPI", reflect.TypeOf((*MockService)(nil).MattermostAPI))
}

// MattermostConfig mocks base method.
func (m *MockService) MattermostConfig() configservice.ConfigService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MattermostConfig")
	ret0, _ := ret[0].(configservice.ConfigService)
	return ret0
}

// MattermostConfig indicates an expected call of MattermostConfig.
func (mr *MockServiceMockRecorder) MattermostConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MattermostConfig", reflect.TypeOf((*MockService)(nil).MattermostConfig))
}

// Reconfigure mocks base method.
func (m *MockService) Reconfigure(arg0 config.StoredConfig, arg1 ...config.Configurable) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reconfigure", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconfigure indicates an expected call of Reconfigure.
func (mr *MockServiceMockRecorder) Reconfigure(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconfigure", reflect.TypeOf((*MockService)(nil).Reconfigure), varargs...)
}

// StoreConfig mocks base method.
func (m *MockService) StoreConfig(arg0 config.StoredConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreConfig indicates an expected call of StoreConfig.
func (mr *MockServiceMockRecorder) StoreConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreConfig", reflect.TypeOf((*MockService)(nil).StoreConfig), arg0)
}

// Telemetry mocks base method.
func (m *MockService) Telemetry() *telemetry.Telemetry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Telemetry")
	ret0, _ := ret[0].(*telemetry.Telemetry)
	return ret0
}

// Telemetry indicates an expected call of Telemetry.
func (mr *MockServiceMockRecorder) Telemetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Telemetry", reflect.TypeOf((*MockService)(nil).Telemetry))
}
