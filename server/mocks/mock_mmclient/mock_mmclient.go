// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/mmclient (interfaces: Client)

// Package mock_mmclient is a generated GoMock package.
package mock_mmclient

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v6/model"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateBot mocks base method.
func (m *MockClient) CreateBot(arg0 *model.Bot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBot indicates an expected call of CreateBot.
func (mr *MockClientMockRecorder) CreateBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBot", reflect.TypeOf((*MockClient)(nil).CreateBot), arg0)
}

// CreateOAuthApp mocks base method.
func (m *MockClient) CreateOAuthApp(arg0 *model.OAuthApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOAuthApp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOAuthApp indicates an expected call of CreateOAuthApp.
func (mr *MockClientMockRecorder) CreateOAuthApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuthApp", reflect.TypeOf((*MockClient)(nil).CreateOAuthApp), arg0)
}

// CreateUserAccessToken mocks base method.
func (m *MockClient) CreateUserAccessToken(arg0, arg1 string) (*model.UserAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*model.UserAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccessToken indicates an expected call of CreateUserAccessToken.
func (mr *MockClientMockRecorder) CreateUserAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccessToken", reflect.TypeOf((*MockClient)(nil).CreateUserAccessToken), arg0, arg1)
}

// DeleteOAuthApp mocks base method.
func (m *MockClient) DeleteOAuthApp(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOAuthApp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOAuthApp indicates an expected call of DeleteOAuthApp.
func (mr *MockClientMockRecorder) DeleteOAuthApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOAuthApp", reflect.TypeOf((*MockClient)(nil).DeleteOAuthApp), arg0)
}

// DisableBot mocks base method.
func (m *MockClient) DisableBot(arg0 string) (*model.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableBot", arg0)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableBot indicates an expected call of DisableBot.
func (mr *MockClientMockRecorder) DisableBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBot", reflect.TypeOf((*MockClient)(nil).DisableBot), arg0)
}

// EnableBot mocks base method.
func (m *MockClient) EnableBot(arg0 string) (*model.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBot", arg0)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableBot indicates an expected call of EnableBot.
func (mr *MockClientMockRecorder) EnableBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBot", reflect.TypeOf((*MockClient)(nil).EnableBot), arg0)
}

// GetBot mocks base method.
func (m *MockClient) GetBot(arg0 string) (*model.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBot", arg0)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBot indicates an expected call of GetBot.
func (mr *MockClientMockRecorder) GetBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBot", reflect.TypeOf((*MockClient)(nil).GetBot), arg0)
}

// GetChannel mocks base method.
func (m *MockClient) GetChannel(arg0 string) (*model.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockClientMockRecorder) GetChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockClient)(nil).GetChannel), arg0)
}

// GetChannelMember mocks base method.
func (m *MockClient) GetChannelMember(arg0, arg1 string) (*model.ChannelMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMember", arg0, arg1)
	ret0, _ := ret[0].(*model.ChannelMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelMember indicates an expected call of GetChannelMember.
func (mr *MockClientMockRecorder) GetChannelMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMember", reflect.TypeOf((*MockClient)(nil).GetChannelMember), arg0, arg1)
}

// GetOAuthApp mocks base method.
func (m *MockClient) GetOAuthApp(arg0 string) (*model.OAuthApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthApp", arg0)
	ret0, _ := ret[0].(*model.OAuthApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthApp indicates an expected call of GetOAuthApp.
func (mr *MockClientMockRecorder) GetOAuthApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthApp", reflect.TypeOf((*MockClient)(nil).GetOAuthApp), arg0)
}

// GetPost mocks base method.
func (m *MockClient) GetPost(arg0 string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockClientMockRecorder) GetPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockClient)(nil).GetPost), arg0)
}

// GetTeam mocks base method.
func (m *MockClient) GetTeam(arg0 string) (*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", arg0)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockClientMockRecorder) GetTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockClient)(nil).GetTeam), arg0)
}

// GetTeamMember mocks base method.
func (m *MockClient) GetTeamMember(arg0, arg1 string) (*model.TeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMember", arg0, arg1)
	ret0, _ := ret[0].(*model.TeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamMember indicates an expected call of GetTeamMember.
func (mr *MockClientMockRecorder) GetTeamMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMember", reflect.TypeOf((*MockClient)(nil).GetTeamMember), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockClient) GetUser(arg0 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockClientMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient)(nil).GetUser), arg0)
}

// GetUserByUsername mocks base method.
func (m *MockClient) GetUserByUsername(arg0 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockClientMockRecorder) GetUserByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockClient)(nil).GetUserByUsername), arg0)
}

// RevokeUserAccessToken mocks base method.
func (m *MockClient) RevokeUserAccessToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserAccessToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUserAccessToken indicates an expected call of RevokeUserAccessToken.
func (mr *MockClientMockRecorder) RevokeUserAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserAccessToken", reflect.TypeOf((*MockClient)(nil).RevokeUserAccessToken), arg0)
}

// SetProfileImage mocks base method.
func (m *MockClient) SetProfileImage(arg0 string, arg1 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfileImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProfileImage indicates an expected call of SetProfileImage.
func (mr *MockClientMockRecorder) SetProfileImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileImage", reflect.TypeOf((*MockClient)(nil).SetProfileImage), arg0, arg1)
}
