// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/clients (interfaces: Client4)

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
)

// MockClient4 is a mock of Client4 interface.
type MockClient4 struct {
	ctrl     *gomock.Controller
	recorder *MockClient4MockRecorder
}

// MockClient4MockRecorder is the mock recorder for MockClient4.
type MockClient4MockRecorder struct {
	mock *MockClient4
}

// NewMockClient4 creates a new mock instance.
func NewMockClient4(ctrl *gomock.Controller) *MockClient4 {
	mock := &MockClient4{ctrl: ctrl}
	mock.recorder = &MockClient4MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient4) EXPECT() *MockClient4MockRecorder {
	return m.recorder
}

// CreateBot mocks base method.
func (m *MockClient4) CreateBot(arg0 *model.Bot) (*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBot", arg0)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateBot indicates an expected call of CreateBot.
func (mr *MockClient4MockRecorder) CreateBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBot", reflect.TypeOf((*MockClient4)(nil).CreateBot), arg0)
}

// CreateOAuthApp mocks base method.
func (m *MockClient4) CreateOAuthApp(arg0 *model.OAuthApp) (*model.OAuthApp, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOAuthApp", arg0)
	ret0, _ := ret[0].(*model.OAuthApp)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateOAuthApp indicates an expected call of CreateOAuthApp.
func (mr *MockClient4MockRecorder) CreateOAuthApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuthApp", reflect.TypeOf((*MockClient4)(nil).CreateOAuthApp), arg0)
}

// CreateUserAccessToken mocks base method.
func (m *MockClient4) CreateUserAccessToken(arg0, arg1 string) (*model.UserAccessToken, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*model.UserAccessToken)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// CreateUserAccessToken indicates an expected call of CreateUserAccessToken.
func (mr *MockClient4MockRecorder) CreateUserAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccessToken", reflect.TypeOf((*MockClient4)(nil).CreateUserAccessToken), arg0, arg1)
}

// EnableBot mocks base method.
func (m *MockClient4) EnableBot(arg0 string) (*model.Bot, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBot", arg0)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// EnableBot indicates an expected call of EnableBot.
func (mr *MockClient4MockRecorder) EnableBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBot", reflect.TypeOf((*MockClient4)(nil).EnableBot), arg0)
}

// GetOAuthApp mocks base method.
func (m *MockClient4) GetOAuthApp(arg0 string) (*model.OAuthApp, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthApp", arg0)
	ret0, _ := ret[0].(*model.OAuthApp)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetOAuthApp indicates an expected call of GetOAuthApp.
func (mr *MockClient4MockRecorder) GetOAuthApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthApp", reflect.TypeOf((*MockClient4)(nil).GetOAuthApp), arg0)
}

// GetUser mocks base method.
func (m *MockClient4) GetUser(arg0, arg1 string) (*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockClient4MockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient4)(nil).GetUser), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockClient4) GetUserByUsername(arg0, arg1 string) (*model.User, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockClient4MockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockClient4)(nil).GetUserByUsername), arg0, arg1)
}

// SetToken mocks base method.
func (m *MockClient4) SetToken(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToken", arg0)
}

// SetToken indicates an expected call of SetToken.
func (mr *MockClient4MockRecorder) SetToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockClient4)(nil).SetToken), arg0)
}

// UpdateUserRoles mocks base method.
func (m *MockClient4) UpdateUserRoles(arg0, arg1 string) (bool, *model.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoles", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.Response)
	return ret0, ret1
}

// UpdateUserRoles indicates an expected call of UpdateUserRoles.
func (mr *MockClient4MockRecorder) UpdateUserRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoles", reflect.TypeOf((*MockClient4)(nil).UpdateUserRoles), arg0, arg1)
}
