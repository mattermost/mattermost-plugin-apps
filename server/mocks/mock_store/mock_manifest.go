// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/store (interfaces: ManifestStore)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apps "github.com/mattermost/mattermost-plugin-apps/apps"
	aws "github.com/mattermost/mattermost-plugin-apps/aws"
	config "github.com/mattermost/mattermost-plugin-apps/server/config"
)

// MockManifestStore is a mock of ManifestStore interface.
type MockManifestStore struct {
	ctrl     *gomock.Controller
	recorder *MockManifestStoreMockRecorder
}

// MockManifestStoreMockRecorder is the mock recorder for MockManifestStore.
type MockManifestStoreMockRecorder struct {
	mock *MockManifestStore
}

// NewMockManifestStore creates a new mock instance.
func NewMockManifestStore(ctrl *gomock.Controller) *MockManifestStore {
	mock := &MockManifestStore{ctrl: ctrl}
	mock.recorder = &MockManifestStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifestStore) EXPECT() *MockManifestStoreMockRecorder {
	return m.recorder
}

// AsMap mocks base method.
func (m *MockManifestStore) AsMap() map[apps.AppID]*apps.Manifest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsMap")
	ret0, _ := ret[0].(map[apps.AppID]*apps.Manifest)
	return ret0
}

// AsMap indicates an expected call of AsMap.
func (mr *MockManifestStoreMockRecorder) AsMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsMap", reflect.TypeOf((*MockManifestStore)(nil).AsMap))
}

// Configure mocks base method.
func (m *MockManifestStore) Configure(arg0 config.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure", arg0)
}

// Configure indicates an expected call of Configure.
func (mr *MockManifestStoreMockRecorder) Configure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockManifestStore)(nil).Configure), arg0)
}

// DeleteLocal mocks base method.
func (m *MockManifestStore) DeleteLocal(arg0 apps.AppID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocal indicates an expected call of DeleteLocal.
func (mr *MockManifestStoreMockRecorder) DeleteLocal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocal", reflect.TypeOf((*MockManifestStore)(nil).DeleteLocal), arg0)
}

// Get mocks base method.
func (m *MockManifestStore) Get(arg0 apps.AppID) (*apps.Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*apps.Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManifestStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManifestStore)(nil).Get), arg0)
}

// InitGlobal mocks base method.
func (m *MockManifestStore) InitGlobal(arg0 aws.Client, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGlobal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGlobal indicates an expected call of InitGlobal.
func (mr *MockManifestStoreMockRecorder) InitGlobal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGlobal", reflect.TypeOf((*MockManifestStore)(nil).InitGlobal), arg0, arg1)
}

// StoreLocal mocks base method.
func (m *MockManifestStore) StoreLocal(arg0 *apps.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLocal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLocal indicates an expected call of StoreLocal.
func (mr *MockManifestStoreMockRecorder) StoreLocal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLocal", reflect.TypeOf((*MockManifestStore)(nil).StoreLocal), arg0)
}
