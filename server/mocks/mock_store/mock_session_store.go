// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/store (interfaces: Sessions)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apps "github.com/mattermost/mattermost-plugin-apps/apps"
	incoming "github.com/mattermost/mattermost-plugin-apps/server/incoming"
	model "github.com/mattermost/mattermost-server/v6/model"
)

// MockSessions is a mock of Sessions interface.
type MockSessions struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsMockRecorder
}

// MockSessionsMockRecorder is the mock recorder for MockSessions.
type MockSessionsMockRecorder struct {
	mock *MockSessions
}

// NewMockSessions creates a new mock instance.
func NewMockSessions(ctrl *gomock.Controller) *MockSessions {
	mock := &MockSessions{ctrl: ctrl}
	mock.recorder = &MockSessionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessions) EXPECT() *MockSessionsMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSessions) Delete(arg0 *incoming.Request, arg1 apps.AppID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionsMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessions)(nil).Delete), arg0, arg1, arg2)
}

// DeleteAllForApp mocks base method.
func (m *MockSessions) DeleteAllForApp(arg0 *incoming.Request, arg1 apps.AppID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllForApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllForApp indicates an expected call of DeleteAllForApp.
func (mr *MockSessionsMockRecorder) DeleteAllForApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllForApp", reflect.TypeOf((*MockSessions)(nil).DeleteAllForApp), arg0, arg1)
}

// DeleteAllForUser mocks base method.
func (m *MockSessions) DeleteAllForUser(arg0 *incoming.Request, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllForUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllForUser indicates an expected call of DeleteAllForUser.
func (mr *MockSessionsMockRecorder) DeleteAllForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllForUser", reflect.TypeOf((*MockSessions)(nil).DeleteAllForUser), arg0, arg1)
}

// Get mocks base method.
func (m *MockSessions) Get(arg0 *incoming.Request, arg1 apps.AppID, arg2 string) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionsMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessions)(nil).Get), arg0, arg1, arg2)
}

// ListForApp mocks base method.
func (m *MockSessions) ListForApp(arg0 *incoming.Request, arg1 apps.AppID) ([]*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForApp", arg0, arg1)
	ret0, _ := ret[0].([]*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForApp indicates an expected call of ListForApp.
func (mr *MockSessionsMockRecorder) ListForApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForApp", reflect.TypeOf((*MockSessions)(nil).ListForApp), arg0, arg1)
}

// ListForUser mocks base method.
func (m *MockSessions) ListForUser(arg0 *incoming.Request, arg1 string) ([]*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForUser", arg0, arg1)
	ret0, _ := ret[0].([]*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForUser indicates an expected call of ListForUser.
func (mr *MockSessionsMockRecorder) ListForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForUser", reflect.TypeOf((*MockSessions)(nil).ListForUser), arg0, arg1)
}

// Save mocks base method.
func (m *MockSessions) Save(arg0 *incoming.Request, arg1 apps.AppID, arg2 string, arg3 *model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSessionsMockRecorder) Save(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSessions)(nil).Save), arg0, arg1, arg2, arg3)
}
