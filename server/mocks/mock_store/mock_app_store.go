// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/store (interfaces: Apps)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apps "github.com/mattermost/mattermost-plugin-apps/apps"
	incoming "github.com/mattermost/mattermost-plugin-apps/server/incoming"
	store "github.com/mattermost/mattermost-plugin-apps/server/store"
)

// MockApps is a mock of Apps interface.
type MockApps struct {
	ctrl     *gomock.Controller
	recorder *MockAppsMockRecorder
}

// MockAppsMockRecorder is the mock recorder for MockApps.
type MockAppsMockRecorder struct {
	mock *MockApps
}

// NewMockApps creates a new mock instance.
func NewMockApps(ctrl *gomock.Controller) *MockApps {
	mock := &MockApps{ctrl: ctrl}
	mock.recorder = &MockAppsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApps) EXPECT() *MockAppsMockRecorder {
	return m.recorder
}

// AsList mocks base method.
func (m *MockApps) AsList(arg0 store.FilterOpt) []apps.App {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsList", arg0)
	ret0, _ := ret[0].([]apps.App)
	return ret0
}

// AsList indicates an expected call of AsList.
func (mr *MockAppsMockRecorder) AsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsList", reflect.TypeOf((*MockApps)(nil).AsList), arg0)
}

// AsMap mocks base method.
func (m *MockApps) AsMap(arg0 store.FilterOpt) map[apps.AppID]apps.App {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsMap", arg0)
	ret0, _ := ret[0].(map[apps.AppID]apps.App)
	return ret0
}

// AsMap indicates an expected call of AsMap.
func (mr *MockAppsMockRecorder) AsMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsMap", reflect.TypeOf((*MockApps)(nil).AsMap), arg0)
}

// Delete mocks base method.
func (m *MockApps) Delete(arg0 *incoming.Request, arg1 apps.AppID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAppsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApps)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockApps) Get(arg0 apps.AppID) (*apps.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*apps.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAppsMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApps)(nil).Get), arg0)
}

// InitBuiltin mocks base method.
func (m *MockApps) InitBuiltin(arg0 ...apps.App) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InitBuiltin", varargs...)
}

// InitBuiltin indicates an expected call of InitBuiltin.
func (mr *MockAppsMockRecorder) InitBuiltin(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitBuiltin", reflect.TypeOf((*MockApps)(nil).InitBuiltin), arg0...)
}

// Save mocks base method.
func (m *MockApps) Save(arg0 *incoming.Request, arg1 apps.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAppsMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockApps)(nil).Save), arg0, arg1)
}
