// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/upstream/detector (interfaces: Detector)

// Package mock_detector is a generated GoMock package.
package mock_detector

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apps "github.com/mattermost/mattermost-plugin-apps/apps"
	upstream "github.com/mattermost/mattermost-plugin-apps/server/upstream"
)

// MockDetector is a mock of Detector interface.
type MockDetector struct {
	ctrl     *gomock.Controller
	recorder *MockDetectorMockRecorder
}

// MockDetectorMockRecorder is the mock recorder for MockDetector.
type MockDetectorMockRecorder struct {
	mock *MockDetector
}

// NewMockDetector creates a new mock instance.
func NewMockDetector(ctrl *gomock.Controller) *MockDetector {
	mock := &MockDetector{ctrl: ctrl}
	mock.recorder = &MockDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDetector) EXPECT() *MockDetectorMockRecorder {
	return m.recorder
}

// AddBuiltinUpstream mocks base method.
func (m *MockDetector) AddBuiltinUpstream(arg0 apps.AppID, arg1 upstream.Upstream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBuiltinUpstream", arg0, arg1)
}

// AddBuiltinUpstream indicates an expected call of AddBuiltinUpstream.
func (mr *MockDetectorMockRecorder) AddBuiltinUpstream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBuiltinUpstream", reflect.TypeOf((*MockDetector)(nil).AddBuiltinUpstream), arg0, arg1)
}

// UpstreamForApp mocks base method.
func (m *MockDetector) UpstreamForApp(arg0 *apps.App) (upstream.Upstream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpstreamForApp", arg0)
	ret0, _ := ret[0].(upstream.Upstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpstreamForApp indicates an expected call of UpstreamForApp.
func (mr *MockDetectorMockRecorder) UpstreamForApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpstreamForApp", reflect.TypeOf((*MockDetector)(nil).UpstreamForApp), arg0)
}
