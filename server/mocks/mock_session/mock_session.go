// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/session (interfaces: Service)

// Package mock_session is a generated GoMock package.
package mock_session

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apps "github.com/mattermost/mattermost-plugin-apps/apps"
	incoming "github.com/mattermost/mattermost-plugin-apps/server/incoming"
	model "github.com/mattermost/mattermost-server/v6/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetOrCreate mocks base method.
func (m *MockService) GetOrCreate(arg0 *incoming.Request, arg1 apps.AppID, arg2 string) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreate indicates an expected call of GetOrCreate.
func (mr *MockServiceMockRecorder) GetOrCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreate", reflect.TypeOf((*MockService)(nil).GetOrCreate), arg0, arg1, arg2)
}

// ListForUser mocks base method.
func (m *MockService) ListForUser(arg0 *incoming.Request, arg1 string) ([]*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForUser", arg0, arg1)
	ret0, _ := ret[0].([]*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForUser indicates an expected call of ListForUser.
func (mr *MockServiceMockRecorder) ListForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForUser", reflect.TypeOf((*MockService)(nil).ListForUser), arg0, arg1)
}

// RevokeSessionsForApp mocks base method.
func (m *MockService) RevokeSessionsForApp(arg0 *incoming.Request, arg1 apps.AppID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSessionsForApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSessionsForApp indicates an expected call of RevokeSessionsForApp.
func (mr *MockServiceMockRecorder) RevokeSessionsForApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSessionsForApp", reflect.TypeOf((*MockService)(nil).RevokeSessionsForApp), arg0, arg1)
}

// RevokeSessionsForUser mocks base method.
func (m *MockService) RevokeSessionsForUser(arg0 *incoming.Request, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSessionsForUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSessionsForUser indicates an expected call of RevokeSessionsForUser.
func (mr *MockServiceMockRecorder) RevokeSessionsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSessionsForUser", reflect.TypeOf((*MockService)(nil).RevokeSessionsForUser), arg0, arg1)
}
