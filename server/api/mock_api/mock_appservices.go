// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/api (interfaces: AppServices)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	apps "github.com/mattermost/mattermost-plugin-apps/apps"
)

// MockAppServices is a mock of AppServices interface
type MockAppServices struct {
	ctrl     *gomock.Controller
	recorder *MockAppServicesMockRecorder
}

// MockAppServicesMockRecorder is the mock recorder for MockAppServices
type MockAppServicesMockRecorder struct {
	mock *MockAppServices
}

// NewMockAppServices creates a new mock instance
func NewMockAppServices(ctrl *gomock.Controller) *MockAppServices {
	mock := &MockAppServices{ctrl: ctrl}
	mock.recorder = &MockAppServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppServices) EXPECT() *MockAppServicesMockRecorder {
	return m.recorder
}

// KVDelete mocks base method
func (m *MockAppServices) KVDelete(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// KVDelete indicates an expected call of KVDelete
func (mr *MockAppServicesMockRecorder) KVDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVDelete", reflect.TypeOf((*MockAppServices)(nil).KVDelete), arg0, arg1, arg2)
}

// KVGet mocks base method
func (m *MockAppServices) KVGet(arg0, arg1, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVGet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// KVGet indicates an expected call of KVGet
func (mr *MockAppServicesMockRecorder) KVGet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVGet", reflect.TypeOf((*MockAppServices)(nil).KVGet), arg0, arg1, arg2, arg3)
}

// KVSet mocks base method
func (m *MockAppServices) KVSet(arg0, arg1, arg2 string, arg3 interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KVSet indicates an expected call of KVSet
func (mr *MockAppServicesMockRecorder) KVSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSet", reflect.TypeOf((*MockAppServices)(nil).KVSet), arg0, arg1, arg2, arg3)
}

// Subscribe mocks base method
func (m *MockAppServices) Subscribe(arg0 *apps.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockAppServicesMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockAppServices)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method
func (m *MockAppServices) Unsubscribe(arg0 *apps.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockAppServicesMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockAppServices)(nil).Unsubscribe), arg0)
}
