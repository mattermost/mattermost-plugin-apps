// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/api (interfaces: Store)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/mattermost/mattermost-plugin-apps/server/api"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// App mocks base method
func (m *MockStore) App() api.AppStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "App")
	ret0, _ := ret[0].(api.AppStore)
	return ret0
}

// App indicates an expected call of App
func (mr *MockStoreMockRecorder) App() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "App", reflect.TypeOf((*MockStore)(nil).App))
}

// Manifest mocks base method
func (m *MockStore) Manifest() api.ManifestStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manifest")
	ret0, _ := ret[0].(api.ManifestStore)
	return ret0
}

// Manifest indicates an expected call of Manifest
func (mr *MockStoreMockRecorder) Manifest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifest", reflect.TypeOf((*MockStore)(nil).Manifest))
}

// Sub mocks base method
func (m *MockStore) Sub() api.SubStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub")
	ret0, _ := ret[0].(api.SubStore)
	return ret0
}

// Sub indicates an expected call of Sub
func (mr *MockStoreMockRecorder) Sub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockStore)(nil).Sub))
}
