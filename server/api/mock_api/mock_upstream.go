// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/api (interfaces: Upstream)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	apps "github.com/mattermost/mattermost-plugin-apps/apps"
	io "io"
	reflect "reflect"
)

// MockUpstream is a mock of Upstream interface
type MockUpstream struct {
	ctrl     *gomock.Controller
	recorder *MockUpstreamMockRecorder
}

// MockUpstreamMockRecorder is the mock recorder for MockUpstream
type MockUpstreamMockRecorder struct {
	mock *MockUpstream
}

// NewMockUpstream creates a new mock instance
func NewMockUpstream(ctrl *gomock.Controller) *MockUpstream {
	mock := &MockUpstream{ctrl: ctrl}
	mock.recorder = &MockUpstreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpstream) EXPECT() *MockUpstreamMockRecorder {
	return m.recorder
}

// OneWay mocks base method
func (m *MockUpstream) OneWay(arg0 *apps.CallRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneWay", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OneWay indicates an expected call of OneWay
func (mr *MockUpstreamMockRecorder) OneWay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneWay", reflect.TypeOf((*MockUpstream)(nil).OneWay), arg0)
}

// Roundtrip mocks base method
func (m *MockUpstream) Roundtrip(arg0 *apps.CallRequest) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roundtrip", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roundtrip indicates an expected call of Roundtrip
func (mr *MockUpstreamMockRecorder) Roundtrip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roundtrip", reflect.TypeOf((*MockUpstream)(nil).Roundtrip), arg0)
}
