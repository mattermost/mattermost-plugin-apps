version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.16
  codecov: codecov/codecov@1.1.1

executors:
  default:
    docker:
      - image: cimg/go:1.17.3

aliases:
- &restore_go_cache
  restore_cache:
    key: go-mod-v2-{{ checksum "go.sum" }}
- &save_go_cache
  save_cache:
    key: go-mod-v2-{{ checksum "go.sum" }}
    paths:
    - "/go/pkg/mod"
- &restore_cypress_cache
  restore_cache:
    key: cypress-cache-{{ checksum "e2e/package-lock.json" }}
- &save_cypress_cache
  save_cache:
    key: cypress-cache-{{ checksum "e2e/package-lock.json" }}
    paths:
      - ./tests-e2e/node_modules
      - /home/circleci/.cache/Cypress

commands:
  deploy:
    parameters:
      bucket:
        type: string
      filename:
        type: string
    steps:
      - aws-s3/copy:
          from: << parameters.filename >>
          to: << parameters.bucket >>
          arguments: '--acl public-read --cache-control no-cache'

  install-golangci-lint:
    description: Install golangci-lint
    parameters:
      version:
        type: string
        default: 1.31.0
      gobin:
        type: string
        default: $GOPATH/bin
      prefix:
        type: string
        default: v2
        description: Prefix for cache key to store the binary.
    steps:
      - restore_cache:
          name: Restore golangci-lint cache
          keys: ['<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>']
      - run:
          name: Install golangci-lint
          command: |
            mkdir -p << parameters.gobin >>
            command -v << parameters.gobin >>/golangci-lint && exit
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b << parameters.gobin >>/ v<< parameters.version >>
      - save_cache:
          name: Save golangci-lint cache
          key: '<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>'
          paths: [<< parameters.gobin >>/golangci-lint]

jobs:
  check-mocks:
    executor:
      name: default
    steps:
      - checkout
      - *restore_go_cache
      - run:
          name: Checking if generated mocks are up to date
          command: |
            make mock
            git --no-pager diff --exit-code server/mocks* || (echo "Please run \"make mock\" and commit the changes in the generated files." && exit 1)
      - *save_go_cache

  check-i18n:
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: Checking if extracted i18n files are up to date
          command: |
            go install github.com/nicksnyder/go-i18n/v2/goi18n@v2.2.0
            make i18n-extract-server
            git --no-pager diff --exit-code assets/i18n/* || (echo "Please run \"make i18n-extract-server\" and commit the changes in the generated files." && exit 1)

  lint:
    executor:
      name: default
    resource_class: large
    steps:
      - checkout
      - *restore_go_cache
      - install-golangci-lint
      - run:
          name: Checking code style
          command: make check-style
      - run: go mod tidy -v
      - run:
          name: Checking diff of go mod files
          command: |
            git --no-pager diff --exit-code go.mod go.sum || (echo "Please run \"go mod tidy\" and commit the changes in go.mod and go.sum." && exit 1)
      - *save_go_cache

  test:
    executor:
      name: default
    steps:
      - checkout
      - *restore_go_cache
      - run: make test
      - *save_go_cache

  coverage:
    executor:
      name: default
    steps:
      - checkout
      - *restore_go_cache
      - run:
          name: Generating Coverage Results
          command: make coverage
      - *save_go_cache
      - codecov/upload:
        file: server/coverage.txt

  build:
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: Building Plugin Bundle
          command: make dist
      - run:
          name: Generating Release Notes
          command: |
            printf "Supported Mattermost Server Versions: **$(cat plugin.json | jq .min_server_version -r)+** \n## Enhancements\n\n## Fixes\n"  >> dist/release-notes.md
            if [[ $(git tag -l | wc -l) -eq 1 ]]; then
              git log --pretty='format:- %h %s' --abbrev-commit --no-decorate --no-color $(git rev-list --max-parents=0 HEAD) HEAD >> dist/release-notes.md
            else
              git log --pretty='format:- %h %s' --abbrev-commit --no-decorate --no-color $(git describe --tags --abbrev=0 $(git describe --tags --abbrev=0)^)..HEAD >> dist/release-notes.md
            fi
      - persist_to_workspace:
          root: dist
          paths:
            - "*.tar.gz"
            - "release-notes.md"
      - store_artifacts:
          path: dist

  test-e2e-postgres11:
    docker:
      - image: cimg/go:1.17.3
      - image: cimg/postgres:11.13
        environment:
          POSTGRES_USER: mmuser
          POSTGRES_DB: mattermost_test
    executor:
      name: default
    steps:
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 20`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - checkout
      - run:
          name: Cloning mattermost-server
          # Keep the commit in sync with go.mod
          command: |
            git clone -n https://github.com/mattermost/mattermost-server.git
            cd mattermost-server && git checkout 2aa06529c50a
      - *restore_go_cache
      - run:
          name: Running e2e tests
          command: MM_SERVER_PATH=$(pwd)/mattermost-server make test-e2e
      - *save_go_cache
  e2e-cypress-tests-pinned:
    resource_class: xlarge
    docker:
      - image: cimg/go:1.17.3-browsers
        environment:
          TEST_DATABASE_URL: postgres://mmuser:mostest@localhost:5432/mattermost_test
          MM_SERVICESETTINGS_ENABLEDEVELOPER: true
      - image: cimg/postgres:11.13
        environment:
          POSTGRES_USER: mmuser
          POSTGRES_PASSWORD: mostest
          POSTGRES_DB: mattermost_test
      - image: mattermost/inbucket:release-1.2.0
      - image: minio/minio:RELEASE.2019-10-11T00-38-09Z
        command: "server /data"
        environment:
          MINIO_ACCESS_KEY: minioaccesskey
          MINIO_SECRET_KEY: miniosecretkey
          MINIO_SSE_MASTER_KEY: "my-minio-key:6368616e676520746869732070617373776f726420746f206120736563726574"
      - image: mattermost/mattermost-elasticsearch-docker:7.0.0
        environment:
          http.host: "0.0.0.0"
          http.port: 9200
          http.cors.enabled: "true"
          http.cors.allow-origin: "http://localhost:1358,http://127.0.0.1:1358"
          http.cors.allow-headers: "X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
          http.cors.allow-credentials: "true"
          transport.host: "127.0.0.1"
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      - image: mattermost/mattermost-enterprise-edition:$MM_DOCKER_IMAGE_TAG
        environment:
          DB_HOST: localhost
          DB_PORT_NUMBER: 5432
          MM_DBNAME: mattermost_test
          MM_USERNAME: mmuser
          MM_PASSWORD: mostest
          CI_INBUCKET_HOST: localhost
          CI_INBUCKET_PORT: 10080
          CI_MINIO_HOST: minio
          IS_CI: true
          MM_CLUSTERSETTINGS_READONLYCONFIG: false
          MM_EMAILSETTINGS_SMTPSERVER: localhost
          MM_EMAILSETTINGS_SMTPPORT: 10025
          MM_ELASTICSEARCHSETTINGS_CONNECTIONURL: http://localhost:9200
          MM_EXPERIMENTALSETTINGS_USENEWSAMLLIBRARY: true
          MM_SQLSETTINGS_DATASOURCE: "postgres://mmuser:mostest@localhost:5432/mattermost_test?sslmode=disable&connect_timeout=10"
          MM_SQLSETTINGS_DRIVERNAME: postgres
          MM_PLUGINSETTINGS_ENABLEUPLOADS: true
          MM_SERVICESETTINGS_SITEURL: http://localhost:8065
          MM_PLUGINSETTINGS_AUTOMATICPREPACKAGEDPLUGINS: false
          MM_ANNOUNCEMENTSETTINGS_ADMINNOTICESENABLED: false
          MM_FEATUREFLAGS_AppsEnabled: true
    environment:
      MM_DOCKER_IMAGE_TAG: 60677f1
      TYPE: NONE
      PULL_REQUEST:
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
      MM_SERVICESETTINGS_SITEURL: http://localhost:8065
      MM_ADMIN_EMAIL: sysadmin@sample.mattermost.com
      MM_ADMIN_USERNAME: sysadmin
      MM_ADMIN_PASSWORD: Sys@dmin-sample1
    steps:
      - setup_remote_docker
      - run:
          name: Wait for Inbucket
          command: |
            until curl --max-time 5 --output - localhost:10080; do echo waiting for Inbucket; sleep 5; done;
      - run:
          name: Wait for Elasticsearch
          command: |
            until curl --max-time 5 --output - localhost:9200; do echo waiting for Elasticsearch; sleep 5; done;
      - run:
          name: Wait for Mattermost server
          command: |
            until curl --max-time 5 --output - localhost:8065/api/v4/system/ping; do echo waiting for Mattermost Server; sleep 2; done;
      - run:
          name: Create admin user
          command: |
            STATUSCODE=$(curl -X POST -H "Content-Type: application/json" -d '{"email": "'${MM_ADMIN_EMAIL}'", "username": "'${MM_ADMIN_USERNAME}'", "password": "'${MM_ADMIN_PASSWORD}'"}' $MM_SERVICESETTINGS_SITEURL/api/v4/users -w "%{http_code}" -o /dev/stderr)
            if test $STATUSCODE -ne 201; then exit 1; fi
      - checkout
      - *restore_go_cache
      - run:
          name: Install Apps plugin
          command: make deploy
      - run:
          name: Start hello-world App
          command: make hello_world
          background: true
      - *save_go_cache
      - *restore_cypress_cache
      - run:
          name: Run Cypress Tests
          no_output_timeout: 30m
          command: |
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"
            cd e2e && npm install && npm run test |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - *save_cypress_cache
      - store_artifacts:
          path: e2e/cypress/screenshots
      - store_artifacts:
          path: e2e/cypress/videos
  e2e-cypress-tests-master:
    resource_class: xlarge
    docker:
      - image: cimg/go:1.17.3-browsers
        environment:
          TEST_DATABASE_URL: postgres://mmuser:mostest@localhost:5432/mattermost_test
          MM_SERVICESETTINGS_ENABLEDEVELOPER: true
      - image: cimg/postgres:11.13
        environment:
          POSTGRES_USER: mmuser
          POSTGRES_PASSWORD: mostest
          POSTGRES_DB: mattermost_test
      - image: mattermost/inbucket:release-1.2.0
      - image: minio/minio:RELEASE.2019-10-11T00-38-09Z
        command: "server /data"
        environment:
          MINIO_ACCESS_KEY: minioaccesskey
          MINIO_SECRET_KEY: miniosecretkey
          MINIO_SSE_MASTER_KEY: "my-minio-key:6368616e676520746869732070617373776f726420746f206120736563726574"
      - image: mattermost/mattermost-elasticsearch-docker:7.0.0
        environment:
          http.host: "0.0.0.0"
          http.port: 9200
          http.cors.enabled: "true"
          http.cors.allow-origin: "http://localhost:1358,http://127.0.0.1:1358"
          http.cors.allow-headers: "X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
          http.cors.allow-credentials: "true"
          transport.host: "127.0.0.1"
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      - image: mattermost/mattermost-enterprise-edition:$MM_DOCKER_IMAGE_TAG
        environment:
          DB_HOST: localhost
          DB_PORT_NUMBER: 5432
          MM_DBNAME: mattermost_test
          MM_USERNAME: mmuser
          MM_PASSWORD: mostest
          CI_INBUCKET_HOST: localhost
          CI_INBUCKET_PORT: 10080
          CI_MINIO_HOST: minio
          IS_CI: true
          MM_CLUSTERSETTINGS_READONLYCONFIG: false
          MM_EMAILSETTINGS_SMTPSERVER: localhost
          MM_EMAILSETTINGS_SMTPPORT: 10025
          MM_ELASTICSEARCHSETTINGS_CONNECTIONURL: http://localhost:9200
          MM_EXPERIMENTALSETTINGS_USENEWSAMLLIBRARY: true
          MM_SQLSETTINGS_DATASOURCE: "postgres://mmuser:mostest@localhost:5432/mattermost_test?sslmode=disable&connect_timeout=10"
          MM_SQLSETTINGS_DRIVERNAME: postgres
          MM_PLUGINSETTINGS_ENABLEUPLOADS: true
          MM_SERVICESETTINGS_SITEURL: http://localhost:8065
          MM_PLUGINSETTINGS_AUTOMATICPREPACKAGEDPLUGINS: false
          MM_ANNOUNCEMENTSETTINGS_ADMINNOTICESENABLED: false
          MM_FEATUREFLAGS_AppsEnabled: true
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
      MM_SERVICESETTINGS_SITEURL: http://localhost:8065
      MM_ADMIN_EMAIL: sysadmin@sample.mattermost.com
      MM_ADMIN_USERNAME: sysadmin
      MM_ADMIN_PASSWORD: Sys@dmin-sample1
    steps:
      - setup_remote_docker
      - run:
          name: Wait for Inbucket
          command: |
            until curl --max-time 5 --output - localhost:10080; do echo waiting for Inbucket; sleep 5; done;
      - run:
          name: Wait for Elasticsearch
          command: |
            until curl --max-time 5 --output - localhost:9200; do echo waiting for Elasticsearch; sleep 5; done;
      - run:
          name: Wait for Mattermost server
          command: |
            until curl --max-time 5 --output - localhost:8065/api/v4/system/ping; do echo waiting for Mattermost Server; sleep 2; done;
      - run:
          name: Create admin user
          command: |
            STATUSCODE=$(curl -X POST -H "Content-Type: application/json" -d '{"email": "'${MM_ADMIN_EMAIL}'", "username": "'${MM_ADMIN_USERNAME}'", "password": "'${MM_ADMIN_PASSWORD}'"}' $MM_SERVICESETTINGS_SITEURL/api/v4/users -w "%{http_code}" -o /dev/stderr)
            if test $STATUSCODE -ne 201; then exit 1; fi
      - checkout
      - *restore_go_cache
      - run:
          name: Install Apps plugin
          command: make deploy
      - run:
          name: Start hello-world App
          command: make hello_world
          background: true
      - *save_go_cache
      - *restore_cypress_cache
      - run:
          name: Run Cypress Tests
          no_output_timeout: 30m
          command: |
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"
            cd e2e && npm install && npm run test |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - *save_cypress_cache
      - store_artifacts:
          path: e2e/cypress/screenshots
      - store_artifacts:
          path: e2e/cypress/videos

  deploy-ci:
    docker:
      - image: cimg/python:2.7
    steps:
      - attach_workspace:
          at: dist
      - run: 'mv dist/*.tar.gz dist/$CIRCLE_PROJECT_REPONAME-ci.tar.gz'
      - deploy:
          filename: "dist/*.tar.gz"
          bucket: "s3://mattermost-plugins-ci/ci/"

  deploy-release-github:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: dist
      - run:
          name: "Publish Release on Github"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -b "$(< ./dist/release-notes.md)" -c ${CIRCLE_SHA1} -n ${CIRCLE_TAG} -delete ${CIRCLE_TAG} dist/*.tar.gz

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - check-mocks
      - check-i18n
      - lint
      - test
      - build
      - e2e-cypress-tests-pinned
      - e2e-cypress-tests-master
      - test-e2e-postgres11
  ci:
    jobs:
      - check-mocks:
          filters:
            tags:
              only: /^v.*/
      - check-i18n:
          filters:
            tags:
              only: /^v.*/
      - lint:
          filters:
            tags:
              only: /^v.*/
      - coverage:
          filters:
            tags:
              only: /^v.*/
      - test-e2e-postgres11:
          filters:
            tags:
              only: /^v.*/
      - e2e-cypress-tests-pinned
      - e2e-cypress-tests-master:
          filters:
            branches:
              only: master
      - build:
          filters:
            tags:
              only: /^v.*/
      - deploy-ci:
          filters:
            branches:
              only: master
          context: plugin-ci
          requires:
            - check-mocks
            - check-i18n
            - lint
            - coverage
            - test-e2e-postgres11
            - e2e-cypress-tests-pinned
            - e2e-cypress-tests-master
            - build
      - deploy-release-github:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context: matterbuild-github-token
          requires:
            - check-mocks
            - check-i18n
            - lint
            - coverage
            - test-e2e-postgres11
            - build
